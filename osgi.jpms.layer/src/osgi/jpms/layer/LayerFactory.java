/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package osgi.jpms.layer;

import java.lang.reflect.Layer;
import java.nio.file.Path;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * The layer factory service is used to create a layer for JPMS modules to
 * resolve.  This layer can have modules which depend on OSGi bundles 
 * installed and resolved in an OSGi Framework.
 */
public interface LayerFactory {
	/**
	 * A named layer is created to hold JPMS modules.  The parent layer
	 * will contain modules that represent OSGi bundles resolved in an OSGi
	 * Framework.
	 */
	public interface NamedLayer {
		public enum Event {
			INVALID;
		}
		/**
		 * The layer that resolved JPMS modules.  The parent of this layer
		 * is the layer containing modules representing OSGi bundles.
		 * @return the JPMS layer
		 */
		public Layer getLayer();
		/**
		 * The layer name
		 * @return the layer name
		 */
		public String getName();
		/**
		 * The ID for this named layer.  This is generated by
		 * the layer factory when a named layer is created.
		 * @return the ID for this named layer 
		 */
		public long getId();
		/**
		 * Indicates of this named layer is still valid.  The OSGi layer is dynamic
		 * and will become invalid if any bundles in the layer hierarchy is uninstalled,
		 * updated, or refreshed.
		 * @return true if this named layer is valid; otherwise false is returned
		 */
		public boolean isValid();

		/**
		 * Adds a consumer for consuming events related to this named layer
		 */
		void consumeEvents(Consumer<Event> consumer);
	}

	/**
	 * Creates a JPMS named layer that uses one class loader.  This layer will use a parent
	 * layer which represents the resolved bundles of the OSGi Framework.
	 * @param name The name to give the layer.  This name does not have to be unique.
	 * @param paths The paths to look for JPMS module files.
	 * @param roots The root modules to resolve in the new layer
	 * @param parent The parent class loader to use.
	 * @return the new named layer
	 * @see Layer#defineModulesWithOneLoader(java.lang.module.Configuration, ClassLoader)
	 */
	NamedLayer createLayerWithOneLoader(String name, Set<Path> paths, Set<String> roots, ClassLoader parent);

	/**
	 * Creates a JPMS named layer that a separate class loader for each module in the layer.  
	 * This layer will use a parent layer which represents the resolved bundles of the OSGi 
	 * Framework.
	 * @param name The name to give the layer.  This name does not have to be unique.
	 * @param paths The paths to look for JPMS module files.
	 * @param roots The root modules to resolve in the new layer
	 * @param parent The parent class loader to use.
	 * @return the new named layer
	 * @see Layer#defineModulesWithManyLoaders(java.lang.module.Configuration, ClassLoader)
	 */
	NamedLayer createLayerWithManyLoaders(String name, Set<Path> paths, Set<String> roots, ClassLoader parent);

	/**
	 * Creates a JPMS names layer that uses the provided mappedLoaders to map a class
	 * loader to a module name.  This layer will use a parent layer which represents 
	 * the resolved bundles of the OSGi Framework.
	 * @param name The name to give the layer.  This name does not have to be unique.
	 * @param paths The paths to look for JPMS module files.
	 * @param roots The root modules to resolve in the new layer
	 * @param mappedLoaders The function to map a module name to a class loader
	 * @return the new named layer
	 * @see Layer#defineModules(java.lang.module.Configuration, Function)
	 */
	NamedLayer createLayerWithMappedLoaders(String name, Set<Path> paths, Set<String> roots, Function<String, ClassLoader> mappedLoaders);
}
